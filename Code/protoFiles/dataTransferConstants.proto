//copyright 2013 Computer Science Department, Recursive InterNetworking Architecture (RINA) laboratory, Boston University.
//All rights reserved. Permission to use, copy, modify, and distribute this software and its documentation for any purpose 
//and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both the 
//copyright notice and this permission notice appear in supporting documentation. The RINA laboratory of the Computer 
//Science Department at Boston University makes no representations about the suitability of this software for any purpose.
//It is provided "as is" without express or implied warranty.
package rina.messages;

message dataTransferConstants_t{					//Specifies the constants for EFCP to use
	optional uint32 maxPDUSize = 1;					//The maximum size of a PDU, in bytes
	optional uint32 addressLength = 2;				//The length of the address field in EFCP PDUs, in bytes
	optional uint32 portIdLength = 3;					//The length of the portId field in EFCP PDUs, in bytes
	optional uint32 cepIdLength = 4;					//The length of the Connection Endpoint Id field in EFCP PDUs, in bytes
	optional uint32 qosidLength = 5;					//The length of the QoS id field in EFCP PDUs, in bytes
	optional uint32 sequenceNumberLength = 6;			//The length of the sequenceNumber field in EFCP PDUs, in bytes
	optional uint32 lengthLength = 7;					//The length of the length field in EFCP PDUs, in bytes
	optional uint64 seqRolloverThreshold = 8;		//The sequence number after which the Flow Allocator instance should create a new EFCP connection. A value of 0 means never
	optional uint32 maxPDULifetime = 9;				//The maximum time a PDU can "live" within the DIF, in milliseconds
	optional bool DIFConcatenation = 10;			//This is true if multiple SDUs can be delimited and concatenated within a single PDU
	optional bool DIFFragmentation = 11;			//This is true if multiple SDUs can be fragmented and reassembled within a single PDU
	optional bool DIFIntegrity = 12;				//True if the PDUs in this DIF have CRC, TTL, and/or encryption
}